#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CMSData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KaygeryaCms")]
	public partial class CMSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPageOption(PageOption instance);
    partial void UpdatePageOption(PageOption instance);
    partial void DeletePageOption(PageOption instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    #endregion
		
		public CMSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KaygeryaCmsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CMSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CMSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CMSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CMSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PageOption> PageOptions
		{
			get
			{
				return this.GetTable<PageOption>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageOptions")]
	public partial class PageOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageOptionID;
		
		private int _PageID;
		
		private string _PageKey;
		
		private string _PageValue;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageOptionIDChanging(int value);
    partial void OnPageOptionIDChanged();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnPageKeyChanging(string value);
    partial void OnPageKeyChanged();
    partial void OnPageValueChanging(string value);
    partial void OnPageValueChanged();
    #endregion
		
		public PageOption()
		{
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageOptionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PageOptionID
		{
			get
			{
				return this._PageOptionID;
			}
			set
			{
				if ((this._PageOptionID != value))
				{
					this.OnPageOptionIDChanging(value);
					this.SendPropertyChanging();
					this._PageOptionID = value;
					this.SendPropertyChanged("PageOptionID");
					this.OnPageOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", DbType="Int NOT NULL")]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PageKey
		{
			get
			{
				return this._PageKey;
			}
			set
			{
				if ((this._PageKey != value))
				{
					this.OnPageKeyChanging(value);
					this.SendPropertyChanging();
					this._PageKey = value;
					this.SendPropertyChanged("PageKey");
					this.OnPageKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PageValue
		{
			get
			{
				return this._PageValue;
			}
			set
			{
				if ((this._PageValue != value))
				{
					this.OnPageValueChanging(value);
					this.SendPropertyChanging();
					this._PageValue = value;
					this.SendPropertyChanged("PageValue");
					this.OnPageValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageOption", Storage="_Page", ThisKey="PageID", OtherKey="PageID", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PageOptions.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PageOptions.Add(this);
						this._PageID = value.PageID;
					}
					else
					{
						this._PageID = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageID;
		
		private string _PageTitle;
		
		private int _ParentPage;
		
		private string _SeoTitle;
		
		private string _SeoDescription;
		
		private string _Keywords;
		
		private string _PageContent;
		
		private int _PageOrder;
		
		private EntitySet<PageOption> _PageOptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnPageTitleChanging(string value);
    partial void OnPageTitleChanged();
    partial void OnParentPageChanging(int value);
    partial void OnParentPageChanged();
    partial void OnSeoTitleChanging(string value);
    partial void OnSeoTitleChanged();
    partial void OnSeoDescriptionChanging(string value);
    partial void OnSeoDescriptionChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnPageContentChanging(string value);
    partial void OnPageContentChanged();
    partial void OnPageOrderChanging(int value);
    partial void OnPageOrderChanged();
    #endregion
		
		public Page()
		{
			this._PageOptions = new EntitySet<PageOption>(new Action<PageOption>(this.attach_PageOptions), new Action<PageOption>(this.detach_PageOptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageTitle", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string PageTitle
		{
			get
			{
				return this._PageTitle;
			}
			set
			{
				if ((this._PageTitle != value))
				{
					this.OnPageTitleChanging(value);
					this.SendPropertyChanging();
					this._PageTitle = value;
					this.SendPropertyChanged("PageTitle");
					this.OnPageTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentPage", DbType="Int NOT NULL")]
		public int ParentPage
		{
			get
			{
				return this._ParentPage;
			}
			set
			{
				if ((this._ParentPage != value))
				{
					this.OnParentPageChanging(value);
					this.SendPropertyChanging();
					this._ParentPage = value;
					this.SendPropertyChanged("ParentPage");
					this.OnParentPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeoTitle", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string SeoTitle
		{
			get
			{
				return this._SeoTitle;
			}
			set
			{
				if ((this._SeoTitle != value))
				{
					this.OnSeoTitleChanging(value);
					this.SendPropertyChanging();
					this._SeoTitle = value;
					this.SendPropertyChanged("SeoTitle");
					this.OnSeoTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeoDescription", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SeoDescription
		{
			get
			{
				return this._SeoDescription;
			}
			set
			{
				if ((this._SeoDescription != value))
				{
					this.OnSeoDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SeoDescription = value;
					this.SendPropertyChanged("SeoDescription");
					this.OnSeoDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PageContent
		{
			get
			{
				return this._PageContent;
			}
			set
			{
				if ((this._PageContent != value))
				{
					this.OnPageContentChanging(value);
					this.SendPropertyChanging();
					this._PageContent = value;
					this.SendPropertyChanged("PageContent");
					this.OnPageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageOrder", DbType="Int NOT NULL")]
		public int PageOrder
		{
			get
			{
				return this._PageOrder;
			}
			set
			{
				if ((this._PageOrder != value))
				{
					this.OnPageOrderChanging(value);
					this.SendPropertyChanging();
					this._PageOrder = value;
					this.SendPropertyChanged("PageOrder");
					this.OnPageOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageOption", Storage="_PageOptions", ThisKey="PageID", OtherKey="PageID")]
		public EntitySet<PageOption> PageOptions
		{
			get
			{
				return this._PageOptions;
			}
			set
			{
				this._PageOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PageOptions(PageOption entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PageOptions(PageOption entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
}
#pragma warning restore 1591
